[
	{
		"slug": "async-await-javascript",
		"title": "Основы асинхронного программирования с async/await",
		"content": "Асинхронное программирование — ключевой аспект JavaScript. async/await упрощает работу с асинхронным кодом, делая его более читаемым и похожим на синхронный. Функция, помеченная async, всегда возвращает Promise. Ключевое слово await приостанавливает выполнение функции, пока Promise не будет выполнен.  Пример: async function fetchData() { const response = await fetch('api/data'); const data = await response.json(); console.log(data); }.  async/await делает асинхронный код более легким для понимания и отладки, избегая ада колбеков.",
		"description": "Разберитесь с async/await в JavaScript для более чистого и читаемого асинхронного кода."
	},
	{
		"slug": "css-flexbox-basics",
		"title": "Основы CSS Flexbox: гибкая разметка",
		"content": "CSS Flexbox — мощный инструмент для создания гибких и адаптивных макетов. Основная идея заключается в том, что элементы располагаются внутри контейнера (flex-container), а их положение и размеры контролируются свойствами flex-контейнера и flex-элементов.  Свойства display: flex;, flex-direction (row, column), justify-content (выравнивание по главной оси), align-items (выравнивание по поперечной оси) — основа для освоения Flexbox.  Flexbox значительно облегчает создание сложных макетов, таких как навигационные меню, колонки и т.д.  Использование flex позволяет элементам гибко увеличиваться и уменьшаться в размерах.",
		"description": "Узнайте основы Flexbox для создания отзывчивых и гибких макетов с использованием CSS."
	},
	{
		"slug": "javascript-modules",
		"title": "Модули в JavaScript: организация кода",
		"content": "JavaScript модули позволяют структурировать код на отдельные, переиспользуемые компоненты. Это помогает в организации больших проектов и предотвращает конфликты имен переменных. Современный JavaScript (ES Modules) использует ключевые слова `import` и `export` для обмена функционалом между модулями. Например, `export function myFunction() {}` экспортирует функцию, а `import { myFunction } from './myModule.js'` импортирует ее. Модули помогают создавать более поддерживаемый и масштабируемый код.",
		"description": "Узнайте, как использовать JavaScript модули для более организованного кода."
	},
	{
		"slug": "git-basics",
		"title": "Основы работы с Git: контроль версий",
		"content": "Git — это система контроля версий, необходимая для любого веб-разработчика. Она позволяет отслеживать изменения в коде, возвращаться к предыдущим версиям, и работать над проектами совместно. Основные команды включают `git init` (создание репозитория), `git add` (добавление изменений), `git commit` (сохранение изменений), `git push` (отправка изменений на удаленный репозиторий) и `git pull` (получение изменений из удаленного репозитория). Понимание основ Git — важный навык для эффективной разработки.",
		"description": "Освойте основы Git для эффективного управления версиями кода и совместной разработки."
	}
]
